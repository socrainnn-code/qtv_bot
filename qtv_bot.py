import tweepy
import gspread
from google.oauth2 import service_account
from datetime import datetime
import os
import logging
import time
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('QTVBot')

# –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Ç–≤–∏—Ç–æ–≤
MILESTONES = [100, 500, 1000, 5000, 10000, 25000, 50000, 75000, 100000]
TARGET_GOAL = 100000

def get_tweet_likes(client, tweet_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ —Ç–≤–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É—è –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥ Tweepy v2
    """
    try:
        # –ü–†–ê–í–ò–õ–¨–ù–´–ô –º–µ—Ç–æ–¥: get_tweet —Å tweet_fields
        response = client.get_tweet(
            tweet_id, 
            tweet_fields=['public_metrics', 'author_id', 'created_at']
        )
        
        if response and response.data:
            likes = response.data.public_metrics.get('like_count', 0)
            logger.info(f"‚úÖ Successfully retrieved tweet data")
            logger.info(f"   Tweet ID: {response.data.id}")
            logger.info(f"   Author ID: {response.data.author_id}")
            logger.info(f"   Likes: {likes}")
            return likes
        else:
            logger.warning("‚ö†Ô∏è No data in API response")
            return 0
            
    except tweepy.TooManyRequests as e:
        logger.error(f"‚è≥ Rate limit exceeded: {e}")
        return None
    except tweepy.NotFound as e:
        logger.error(f"‚ùå Tweet not found: {e}")
        return None
    except tweepy.Unauthorized as e:
        logger.error(f"‚ùå Authentication failed: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Unexpected error getting tweet: {e}")
        return None

def initialize_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    try:
        if not os.path.exists('credentials.json'):
            logger.error("‚ùå credentials.json file not found")
            return None
        
        # –ß–∏—Ç–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º credentials
        with open('credentials.json', 'r') as f:
            data = json.load(f)
            logger.info(f"‚úÖ Loaded credentials for: {data.get('client_email', 'unknown')}")
        
        credentials = service_account.Credentials.from_service_account_file(
            'credentials.json',
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        gc = gspread.authorize(credentials)
        
        spreadsheet_id = os.getenv('SPREADSHEET_ID')
        if not spreadsheet_id:
            logger.error("‚ùå SPREADSHEET_ID environment variable not set")
            return None
        
        logger.info(f"üìä Opening spreadsheet: {spreadsheet_id}")
        spreadsheet = gc.open_by_key(spreadsheet_id)
        sheet = spreadsheet.sheet1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø —á—Ç–µ–Ω–∏–µ–º –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–∏
        test_value = sheet.acell('A1').value
        logger.info(f"‚úÖ Google Sheets access confirmed. A1 value: '{test_value}'")
        
        return sheet
        
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize Google Sheets: {e}")
        return None

def update_google_sheets(sheet, likes_count, last_checkpoint, status="Active"):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google Sheets —Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫"""
    try:
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        update_data = [
            [likes_count],          # A2 - –¢–µ–∫—É—â–∏–µ –ª–∞–π–∫–∏
            [last_checkpoint],      # B2 - –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞
            [TARGET_GOAL],          # C2 - –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            [current_time],         # D2 - –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            [status]                # E2 - –°—Ç–∞—Ç—É—Å
        ]
        
        sheet.update('A2:E2', update_data)
        logger.info(f"üìà Updated Google Sheets: {likes_count} likes")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Failed to update Google Sheets: {e}")
        return False

def post_milestone_tweet(client, tweet_id, current_likes, milestone):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Ç–≤–∏—Ç–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏"""
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç milestone
        if milestone == 100:
            message = f"üéâ –ü–µ—Ä–≤—ã–µ 100 –ª–∞–π–∫–æ–≤! –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ –∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—É! üôè\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 500:
            message = f"üî• 500 –ª–∞–π–∫–æ–≤! –°–æ–æ–±—â–µ—Å—Ç–≤–æ —Ä–∞—Å—Ç–µ—Ç –Ω–µ –ø–æ –¥–Ω—è–º, –∞ –ø–æ —á–∞—Å–∞–º! üå±\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 1000:
            message = f"‚ö° 1000 –ª–∞–π–∫–æ–≤! –ê–ª–≥–æ—Ä–∏—Ç–º—ã Twitter –Ω–∞—á–∞–ª–∏ –Ω–∞—Å –∑–∞–º–µ—á–∞—Ç—å! üìä\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 5000:
            message = f"üåü 5000 –ª–∞–π–∫–æ–≤! –ú—ã –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ —Ä–∞–∑–≥–∞–¥–∫–µ —Ç–∞–π–Ω—ã! üéØ\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 10000:
            message = f"üí´ 10,000 –ª–∞–π–∫–æ–≤! –°–∏–ª–∞ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑—É–º–∞ –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç! üß†\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 25000:
            message = f"üöÄ 25,000 –ª–∞–π–∫–æ–≤! –í–∏—Ä–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –Ω–∞–±–∏—Ä–∞–µ—Ç –æ–±–æ—Ä–æ—Ç—ã! üå™Ô∏è\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 50000:
            message = f"üéØ 50,000 –ª–∞–π–∫–æ–≤! –ü–æ–ª–æ–≤–∏–Ω–∞ –ø—É—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞ –±–ª–µ—Å—Ç—è—â–µ! ‚ú®\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 75000:
            message = f"üî• 75,000 –ª–∞–π–∫–æ–≤! –§–∏–Ω–∞–ª —É–∂–µ –±–ª–∏–∑–∫–æ, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ! ‚è≥\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        elif milestone == 100000:
            message = f"üèÜ 100,000 –õ–ê–ô–ö–û–í –î–û–°–¢–ò–ì–ù–£–¢–û! –¢–∞–π–Ω–∞ —Ä–∞—Å–∫—Ä—ã—Ç–∞! üéä\n\n–°–ø–∞—Å–∏–±–æ –∫–∞–∂–¥–æ–º—É, –∫—Ç–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ —ç—Ç–æ–º –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏! üôå\n#QTV #QuestToVision #–ü–æ–±–µ–¥–∞"
        else:
            progress_percent = (current_likes / TARGET_GOAL) * 100
            message = f"üöÄ –ü—Ä–æ–≥—Ä–µ—Å—Å: {current_likes}/{TARGET_GOAL} ({progress_percent:.1f}%)\n\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–æ–≤–∞—è –≤–µ—Ö–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üëÅÔ∏è‚ö°Ô∏è\n#QTV #QuestToVision"
        
        # –ü—É–±–ª–∏–∫—É–µ–º —Ç–≤–∏—Ç –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–≤–∏—Ç
        response = client.create_tweet(
            text=message,
            in_reply_to_tweet_id=tweet_id
        )
        
        logger.info(f"üì¢ Published milestone tweet: {milestone} likes")
        logger.info(f"   Tweet ID: {response.data['id']}")
        return True
        
    except tweepy.TooManyRequests as e:
        logger.warning(f"‚è≥ Rate limit for tweeting: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå Failed to post milestone tweet: {e}")
        return False

def check_milestones(client, tweet_id, current_likes, last_checkpoint):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫ –∏ –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–≤–∏—Ç—ã"""
    new_checkpoint = last_checkpoint
    
    for milestone in MILESTONES:
        if current_likes >= milestone > last_checkpoint:
            logger.info(f"üéØ Milestone reached: {milestone} likes!")
            
            # –ü—É–±–ª–∏–∫—É–µ–º –æ—Ç–≤–µ—Ç–Ω—ã–π —Ç–≤–∏—Ç
            if post_milestone_tweet(client, tweet_id, current_likes, milestone):
                new_checkpoint = milestone
                logger.info(f"‚úÖ Milestone {milestone} celebrated with tweet")
            else:
                logger.warning(f"‚ö†Ô∏è Failed to tweet for milestone {milestone}")
    
    return new_checkpoint

def load_last_checkpoint(sheet):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É –∏–∑ Google Sheets"""
    try:
        # –ß–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —è—á–µ–π–∫–∏ B2
        checkpoint_value = sheet.acell('B2').value
        if checkpoint_value and checkpoint_value.isdigit():
            return int(checkpoint_value)
        return 0
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Could not load last checkpoint: {e}")
        return 0

def main():
    logger.info("=" * 50)
    logger.info("üöÄ STARTING QTV BOT WITH MILESTONES")
    logger.info("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ['TWITTER_BEARER_TOKEN', 'SPREADSHEET_ID', 'TARGET_TWEET_ID']
    env_status = {}
    
    for var in required_env_vars:
        value = os.getenv(var)
        if value:
            logger.info(f"‚úÖ {var}: SET")
            env_status[var] = True
        else:
            logger.error(f"‚ùå {var}: NOT SET")
            env_status[var] = False
    
    if not all(env_status.values()):
        logger.error("‚ùå Missing required environment variables")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º credentials
    if not os.path.exists('credentials.json'):
        logger.error("‚ùå credentials.json file not found")
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Twitter –∫–ª–∏–µ–Ω—Ç
    try:
        bearer_token = os.getenv('TWITTER_BEARER_TOKEN')
        client = tweepy.Client(bearer_token=bearer_token)
        logger.info("‚úÖ Twitter client initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize Twitter client: {e}")
        return False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
    sheet = initialize_google_sheets()
    if not sheet:
        logger.error("‚ùå Failed to initialize Google Sheets")
        return False
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É
    last_checkpoint = load_last_checkpoint(sheet)
    logger.info(f"üìä Last checkpoint: {last_checkpoint}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤
    tweet_id = os.getenv('TARGET_TWEET_ID')
    logger.info(f"üì® Fetching likes for tweet: {tweet_id}")
    
    like_count = get_tweet_likes(client, tweet_id)
    
    if like_count is None:
        logger.error("‚ùå Failed to get tweet likes")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏
    new_checkpoint = check_milestones(client, tweet_id, like_count, last_checkpoint)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    status = "Completed" if like_count >= TARGET_GOAL else "Active"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º Google Sheets
    if not update_google_sheets(sheet, like_count, new_checkpoint, status):
        logger.error("‚ùå Failed to update Google Sheets")
        return False
    
    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–∏ - –æ—Å–æ–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if like_count >= TARGET_GOAL and last_checkpoint < TARGET_GOAL:
        logger.info("üèÜ TARGET GOAL ACHIEVED! Mission accomplished!")
    
    logger.info("=" * 50)
    logger.info(f"üéâ QTV BOT COMPLETED! Current: {like_count}, Checkpoint: {new_checkpoint}")
    logger.info("=" * 50)
    return True

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
