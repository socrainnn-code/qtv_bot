import tweepy
import gspread
from google.oauth2 import service_account
from datetime import datetime, timedelta
import os
import logging
import json
import jwt  # –î–æ–±–∞–≤–ª—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger('QTVBot')

def validate_jwt_token(private_key, client_email):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JWT —Ç–æ–∫–µ–Ω–∞"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å JWT —Ç–æ–∫–µ–Ω
        now = datetime.utcnow()
        payload = {
            'iss': client_email,
            'scope': 'https://www.googleapis.com/auth/spreadsheets',
            'aud': 'https://oauth2.googleapis.com/token',
            'exp': now + timedelta(hours=1),
            'iat': now
        }
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω
        signed_jwt = jwt.encode(payload, private_key, algorithm='RS256')
        logger.info("‚úÖ JWT token validation successful")
        return True
        
    except jwt.InvalidKeyError as e:
        logger.error(f"‚ùå Invalid private key: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå JWT validation error: {e}")
        return False

def check_credentials_file():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç credentials.json –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º"""
    try:
        if not os.path.exists('credentials.json'):
            logger.error("‚ùå credentials.json file not found")
            return False
        
        with open('credentials.json', 'r') as f:
            creds_data = json.load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['type', 'project_id', 'private_key', 'client_email', 'private_key_id']
        for field in required_fields:
            if field not in creds_data:
                logger.error(f"‚ùå Missing field in credentials: {field}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ private_key –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        private_key = creds_data['private_key']
        if not private_key.startswith('-----BEGIN PRIVATE KEY-----'):
            logger.error("‚ùå Private key has invalid format")
            return False
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω
        if not validate_jwt_token(private_key, creds_data['client_email']):
            return False
        
        logger.info(f"‚úÖ credentials.json valid for: {creds_data['client_email']}")
        return True
        
    except json.JSONDecodeError:
        logger.error("‚ùå credentials.json contains invalid JSON")
        return False
    except Exception as e:
        logger.error(f"‚ùå Error validating credentials: {e}")
        return False

def initialize_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not check_credentials_file():
        return None
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º credentials
        credentials = service_account.Credentials.from_service_account_file(
            'credentials.json',
            scopes=['https://www.googleapis.com/auth/spreadsheets']
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏
        gc = gspread.Client(credentials)
        gc.session.timeout = 30
        
        spreadsheet_id = os.getenv('SPREADSHEET_ID')
        if not spreadsheet_id:
            logger.error("‚ùå SPREADSHEET_ID not set")
            return None
        
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É
        spreadsheet = gc.open_by_key(spreadsheet_id)
        sheet = spreadsheet.sheet1
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
        sheet.get('A1')
        
        logger.info("‚úÖ Google Sheets initialized successfully")
        return sheet
        
    except gspread.SpreadsheetNotFound:
        logger.error("‚ùå Spreadsheet not found. Check SPREADSHEET_ID and sharing permissions")
        return None
    except gspread.NoValidUrlKeyFound:
        logger.error("‚ùå Invalid spreadsheet ID format")
        return None
    except gspread.APIError as e:
        logger.error(f"‚ùå Google API error: {e}")
        return None
    except Exception as e:
        logger.error(f"‚ùå Failed to initialize Google Sheets: {e}")
        return None

def main():
    logger.info("üöÄ Starting QTV Bot")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_env_vars = ['TWITTER_BEARER_TOKEN', 'SPREADSHEET_ID', 'TARGET_TWEET_ID']
    for var in required_env_vars:
        if not os.getenv(var):
            logger.error(f"‚ùå Missing environment variable: {var}")
            return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Google Sheets
    sheet = initialize_google_sheets()
    if not sheet:
        logger.error("‚ùå Failed to initialize Google Sheets. Check credentials and spreadsheet sharing.")
        return
    
    # –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞...
